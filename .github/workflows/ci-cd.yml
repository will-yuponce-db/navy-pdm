name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run typecheck
      
    - name: Run unit tests
      run: npm run test:run
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Build and Test
  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: build/
        retention-days: 7

  # Selenium E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    
    strategy:
      matrix:
        browser: [chrome, firefox]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/
        
    - name: Start application
      run: |
        npm start &
        sleep 15
        curl -f http://localhost:3000 || exit 1
      env:
        NODE_ENV: production
        
    - name: Run Selenium tests
      run: |
        npm run test:selenium
      env:
        HEADLESS: true
        BROWSER: ${{ matrix.browser }}
        BASE_URL: http://localhost:3000
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: selenium-results-${{ matrix.browser }}
        path: |
          test-results/
          screenshots/
        retention-days: 7

  # Security and Performance
  security-performance:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/
        
    - name: Run security audit
      run: npm run audit
      
    - name: Run Lighthouse performance tests
      run: npm run performance:lighthouse
      
    - name: Start application for performance tests
      run: |
        npm start &
        sleep 15
        curl -f http://localhost:3000 || exit 1
      env:
        NODE_ENV: production
        
    - name: Run performance Selenium tests
      run: |
        npm run test:selenium:home
      env:
        HEADLESS: true
        BROWSER: chrome
        BASE_URL: http://localhost:3000
        PERFORMANCE_TEST: true
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          test-results/
          screenshots/
          lighthouse-results/
        retention-days: 7

  # Docker Build and Test
  docker:
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t navy-pdm:latest .
        
    - name: Test Docker container
      run: |
        docker run -d -p 3000:3000 --name navy-pdm-test navy-pdm:latest
        sleep 10
        curl -f http://localhost:3000 || exit 1
        docker stop navy-pdm-test
        docker rm navy-pdm-test

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-performance, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # npm run deploy:staging

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-performance, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # npm run deploy:production